<UserControl
    x:Class="Joufflu.Proto.Data.ValueEdit"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:collections="clr-namespace:System.Collections.Generic;assembly=System.Runtime"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:Joufflu.Shared.Extensions;assembly=Joufflu.Shared"
    xmlns:converters="clr-namespace:Joufflu.Shared.Converters;assembly=Joufflu.Shared"
    xmlns:fonts="clr-namespace:Joufflu.Shared.Resources.Fonts;assembly=Joufflu.Shared"
    xmlns:inputs="clr-namespace:Joufflu.Inputs;assembly=Joufflu.Inputs"
    xmlns:local="clr-namespace:Joufflu.Proto.Data"
    xmlns:components="clr-namespace:Joufflu.Proto.Data.Components"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="ContainerElement"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Joufflu.Proto.Data;component/Components/SchemaTreeView.xaml" />
                <ResourceDictionary Source="/Joufflu.Proto.Data;component/Components/Separators.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <converters:TypeConverter x:Key="TypeConverter" />
            <converters:BooleansConverter x:Key="BooleansConverter" />
            <local:GenericReferencesConverter x:Key="GenericReferencesConverter" />

            <local:ValueTemplateSelector x:Key="ValueTemplateSelector">
                <local:ValueTemplateSelector.StringTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <TextBox Text="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.StringTemplate>
                <local:ValueTemplateSelector.BooleanTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <CheckBox IsChecked="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.BooleanTemplate>
                <local:ValueTemplateSelector.IntegerTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <inputs:NumericUpDown Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.IntegerTemplate>
                <local:ValueTemplateSelector.DecimalTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <inputs:DecimalUpDown Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.DecimalTemplate>
                <local:ValueTemplateSelector.DateTimeTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <DatePicker SelectedDate="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.DateTimeTemplate>
                <local:ValueTemplateSelector.TimeSpanTemplate>
                    <DataTemplate DataType="{x:Type local:GenericValue}">
                        <inputs:TimeSpanPicker Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.TimeSpanTemplate>
                <local:ValueTemplateSelector.EnumTemplate>
                    <DataTemplate DataType="{x:Type local:GenericEnum}">
                        <ComboBox
                            SelectedValuePath="Index"
                            SelectedValue="{Binding Value, Mode=TwoWay}"
                            ItemsSource="{Binding Availables}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </DataTemplate>
                </local:ValueTemplateSelector.EnumTemplate>
            </local:ValueTemplateSelector>

            <DataTemplate DataType="{x:Type local:GenericValue}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="28" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <components:IconDataType
                        Margin="10,0,0,0"
                        Type="{Binding DataType}"
                        WithText="False" />
                    <ContentControl
                        Name="ValueInput"
                        Grid.Column="1"
                        Margin="0,1,0,1"
                        Content="{Binding}"
                        ContentTemplateSelector="{StaticResource ValueTemplateSelector}" />

                    <Grid Grid.Column="1" Margin="0,1,0,1">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChecked, ElementName=ShowContextRefButton}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <inputs:ComboBoxSearch
                            Padding="22,0,0,0"
                            SelectedValuePath="Identifier"
                            SelectedValue="{Binding ContextReference, Mode=TwoWay}">
                            <inputs:ComboBoxSearch.ItemsSource>
                                <MultiBinding Converter="{StaticResource GenericReferencesConverter}">
                                    <Binding Path="DataType" />
                                    <Binding Path="AvailableReferencesPerType" RelativeSource="{RelativeSource AncestorType={x:Type local:ValueEdit}}" />
                                </MultiBinding>
                            </inputs:ComboBoxSearch.ItemsSource>
                            <inputs:ComboBoxSearch.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <components:IconDataType Type="{Binding DataType}" WithText="False" />
                                        <TextBlock
                                            VerticalAlignment="Center"
                                            Margin="4,0,0,0"
                                            Text="{Binding Identifier}" />
                                    </StackPanel>
                                </DataTemplate>
                            </inputs:ComboBoxSearch.ItemTemplate>
                        </inputs:ComboBoxSearch>

                        <fonts:Icon
                            Text="{x:Static fonts:IconFont.Key}"
                            HorizontalAlignment="Left"
                            Margin="4,0,0,0"
                            IsHitTestVisible="False"
                            Opacity="0.6" />
                    </Grid>
                    <ToggleButton
                        Command="{Binding ClearReferenceCommand}"
                        CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
                        x:Name="ShowContextRefButton"
                        Margin="1,0,1,0"
                        Grid.Column="2"
                        ToolTip="Use a contexte reference">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton" BasedOn="{StaticResource IconToggleButton}">
                                <Setter Property="IsChecked" Value="True" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ContextReference}" Value="">
                                        <Setter Property="IsChecked" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                        <fonts:Icon Text="{x:Static fonts:IconFont.Key}" />
                    </ToggleButton>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:ValueEdit}}}" Value="True">
                        <Setter TargetName="ValueInput" Property="IsEnabled" Value="False" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate DataType="{x:Type local:GenericArray}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="28" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <components:IconDataType
                        Margin="10,0,0,0"
                        Opacity="0.6"
                        Type="Array"
                        WithText="False" />

                    <Button
                        Margin="0,0,1,0"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        Name="AddValueButton"
                        ToolTip="Add value"
                        Width="24"
                        Height="24"
                        Command="{Binding AddValueCommand}"
                        Style="{StaticResource IconButton}">
                        <fonts:Icon Text="{x:Static fonts:IconFont.Plus}" />
                    </Button>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:ValueEdit}}}" Value="True">
                        <Setter TargetName="AddValueButton" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate DataType="{x:Type local:GenericObject}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="28" />
                    </Grid.ColumnDefinitions>
                    <components:IconDataType
                        Margin="10,0,0,0"
                        Opacity="0.6"
                        Type="Object"
                        WithText="False" />
                </Grid>
            </DataTemplate>

            <DataTemplate DataType="{x:Type local:GenericProperty}">
                <Grid Height="26">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="Name" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="24" />
                    </Grid.ColumnDefinitions>
                    <components:Separators Element="{Binding Element}">
                        <TextBlock Text="{Binding Identifier}" VerticalAlignment="Center" />
                    </components:Separators>
                    <ContentControl Grid.Column="1" Content="{Binding Element}" />
                </Grid>
            </DataTemplate>

            <DataTemplate DataType="{x:Type local:GenericIndex}">
                <Grid Height="26">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="Name" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="24" />
                    </Grid.ColumnDefinitions>
                    <components:Separators Element="{Binding Element}">
                        <TextBlock Text="{Binding Identifier}" VerticalAlignment="Center" />
                    </components:Separators>

                    <ContentControl Grid.Column="1" Content="{Binding Element}" />
                    <Button
                        Name="RemoveButton"
                        Grid.Column="2"
                        Margin="0,0,1,0"
                        Command="{Binding RemoveCommand}"
                        Style="{StaticResource IconButton}"
                        ToolTip="Remove">
                        <fonts:Icon Text="{x:Static fonts:IconFont.Trash}" />
                    </Button>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:ValueEdit}}}" Value="True">
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <local:GenericTemplateSelector x:Key="GenericTemplateSelector">
                <local:GenericTemplateSelector.ObjectTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type local:GenericProperty}" ItemsSource="{Binding Element.WrappedProperties}">
                        <ContentPresenter Content="{Binding}" />
                    </HierarchicalDataTemplate>
                </local:GenericTemplateSelector.ObjectTemplate>
                <local:GenericTemplateSelector.ArrayTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type local:GenericIndex}" ItemsSource="{Binding Element.IndexedValues}">
                        <ContentPresenter Content="{Binding}" />
                    </HierarchicalDataTemplate>
                </local:GenericTemplateSelector.ArrayTemplate>
                <local:GenericTemplateSelector.ElementTemplate>
                    <DataTemplate>
                        <ContentPresenter Content="{Binding}" />
                    </DataTemplate>
                </local:GenericTemplateSelector.ElementTemplate>
            </local:GenericTemplateSelector>
        </ResourceDictionary>
    </UserControl.Resources>

    <TreeView
        DataContext="{Binding ElementName=ContainerElement}"
        Grid.IsSharedSizeScope="True"
        ItemContainerStyle="{StaticResource SchemaTreeViewItem}"
        ItemTemplateSelector="{StaticResource GenericTemplateSelector}"
        ItemsSource="{Binding Root.WrappedProperties}" />

</UserControl>