<UserControl
    x:Class="Joufflu.Data.Schema.GenericEdit"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:collections="clr-namespace:System.Collections.Generic;assembly=System.Runtime"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:Joufflu.Shared.Extensions;assembly=Joufflu.Shared"
    xmlns:converters="clr-namespace:Joufflu.Shared.Converters;assembly=Joufflu.Shared"
    xmlns:fonts="clr-namespace:Joufflu.Shared.Resources.Fonts;assembly=Joufflu.Shared"
    xmlns:inputs="clr-namespace:Joufflu.Inputs;assembly=Joufflu.Inputs"
    xmlns:local="clr-namespace:Joufflu.Data.Schema"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:schema="clr-namespace:Usuel.Shared.Schema;assembly=Usuel.Shared"
    x:Name="ContainerElement"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Joufflu.Data;component/Schema/SchemaTreeView.xaml" />
                <ResourceDictionary Source="/Joufflu.Data;component/Schema/Separators.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <local:ValueTemplateSelector x:Key="ValueTemplateSelector">
                <local:ValueTemplateSelector.StringTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <TextBox Text="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.StringTemplate>
                <local:ValueTemplateSelector.BooleanTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <CheckBox IsChecked="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.BooleanTemplate>
                <local:ValueTemplateSelector.IntegerTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <inputs:NumericUpDown Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.IntegerTemplate>
                <local:ValueTemplateSelector.DecimalTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <inputs:DecimalUpDown Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.DecimalTemplate>
                <local:ValueTemplateSelector.DateTimeTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <DatePicker SelectedDate="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.DateTimeTemplate>
                <local:ValueTemplateSelector.TimeSpanTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericValue}">
                        <inputs:TimeSpanPicker Value="{Binding Value, Mode=TwoWay}" />
                    </DataTemplate>
                </local:ValueTemplateSelector.TimeSpanTemplate>
            </local:ValueTemplateSelector>

            <DataTemplate DataType="{x:Type schema:GenericValue}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <local:IconDataType Margin="10,0,0,0" Type="{Binding DataType}" />
                    <ComboBox
                        Name="TypeInput"
                        Margin="2,1"
                        ItemsSource="{extensions:EnumValuesExtension {x:Type schema:EnumDataType},
                                                                     IgnoreElements=2}"
                        SelectedItem="{Binding DataType, Mode=TwoWay}"
                        Visibility="Collapsed">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <local:IconDataType Type="{Binding}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <ContentControl
                        Grid.Column="1"
                        Margin="0,1,2,1"
                        Content="{Binding}"
                        ContentTemplateSelector="{StaticResource ValueTemplateSelector}" />
                </Grid>

                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="TypeInput" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="TypeInput" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate DataType="{x:Type schema:GenericEnum}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <local:IconDataType Margin="10,0,0,0" 
                        Opacity="0.6"
                        Type="Enum" />
                    <ComboBox
                        Grid.Column="1"
                        Margin="0,1,2,1"
                        SelectedValuePath="Index"
                        SelectedValue="{Binding Value, Mode=TwoWay}"
                        ItemsSource="{Binding Availables}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </Grid>
            </DataTemplate>

            <DataTemplate DataType="{x:Type schema:GenericArray}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <local:IconDataType
                        Margin="10,0,0,0"
                        Opacity="0.6"
                        Type="Array" />

                    <StackPanel
                        Name="ActionContainer"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal"
                        Visibility="Collapsed">
                        <Button
                            ToolTip="Add value"
                            Width="24"
                            Height="24"
                            Command="{Binding AddValueCommand}"
                            Style="{StaticResource IconButton}">
                            <fonts:Icon Text="{x:Static fonts:IconFont.Plus}" />
                        </Button>
                        <inputs:Dropdown BorderThickness="0" ToolTip="Change type">
                            <inputs:Dropdown.Header>
                                <fonts:Icon Text="{x:Static fonts:IconFont.Pen}" />
                            </inputs:Dropdown.Header>
                            <StackPanel Width="80">
                                <Button
                                    Command="{Binding ChangeSchemaCommand}"
                                    CommandParameter="{x:Static schema:EnumDataType.String}"
                                    Style="{StaticResource ItemButton}">
                                    <StackPanel Orientation="Horizontal">
                                        <fonts:Icon Text="{x:Static fonts:IconFont.Quotes}" />
                                        <TextBlock Margin="4,0,0,0">value</TextBlock>
                                    </StackPanel>
                                </Button>
                                <Button
                                    Command="{Binding ChangeSchemaCommand}"
                                    CommandParameter="{x:Static schema:EnumDataType.Array}"
                                    Style="{StaticResource ItemButton}">
                                    <StackPanel Orientation="Horizontal">
                                        <fonts:Icon Text="{x:Static fonts:IconFont.BracketsSquare}" />
                                        <TextBlock Margin="4,0,0,0">array</TextBlock>
                                    </StackPanel>
                                </Button>
                                <Button
                                    Command="{Binding ChangeSchemaCommand}"
                                    CommandParameter="{x:Static schema:EnumDataType.Object}"
                                    Style="{StaticResource ItemButton}">
                                    <StackPanel Orientation="Horizontal">
                                        <fonts:Icon Text="{x:Static fonts:IconFont.BracketsCurly}" />
                                        <TextBlock Margin="4,0,0,0">object</TextBlock>
                                    </StackPanel>
                                </Button>
                            </StackPanel>
                        </inputs:Dropdown>
                    </StackPanel>
                </Grid>

                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ActionContainer" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ActionContainer" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate DataType="{x:Type schema:GenericObject}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <local:IconDataType
                        Margin="10,0,0,0"
                        Opacity="0.6"
                        Type="Object" />

                    <inputs:Dropdown
                        Name="ActionContainer"
                        Grid.Column="1"
                        HorizontalAlignment="Right"
                        BorderThickness="0"
                        Visibility="Collapsed"
                        ToolTip="Add property">
                        <inputs:Dropdown.Header>
                            <fonts:Icon Text="{x:Static fonts:IconFont.Plus}" />
                        </inputs:Dropdown.Header>
                        <StackPanel Width="80">
                            <Button
                                Command="{Binding CreatePropertyCommand}"
                                CommandParameter="{x:Static schema:EnumDataType.String}"
                                Style="{StaticResource ItemButton}">
                                <StackPanel Orientation="Horizontal">
                                    <fonts:Icon Text="{x:Static fonts:IconFont.Quotes}" />
                                    <TextBlock Margin="4,0,0,0">value</TextBlock>
                                </StackPanel>
                            </Button>
                            <Button
                                Command="{Binding CreatePropertyCommand}"
                                CommandParameter="{x:Static schema:EnumDataType.Array}"
                                Style="{StaticResource ItemButton}">
                                <StackPanel Orientation="Horizontal">
                                    <fonts:Icon Text="{x:Static fonts:IconFont.BracketsSquare}" />
                                    <TextBlock Margin="4,0,0,0">array</TextBlock>
                                </StackPanel>
                            </Button>
                            <Button
                                Command="{Binding CreatePropertyCommand}"
                                CommandParameter="{x:Static schema:EnumDataType.Object}"
                                Style="{StaticResource ItemButton}">
                                <StackPanel Orientation="Horizontal">
                                    <fonts:Icon Text="{x:Static fonts:IconFont.BracketsCurly}" />
                                    <TextBlock Margin="4,0,0,0">object</TextBlock>
                                </StackPanel>
                            </Button>
                        </StackPanel>
                    </inputs:Dropdown>
                </Grid>

                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ActionContainer" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ActionContainer" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="SharedSchemaTemplate" DataType="{x:Type schema:GenericProperty}">
                <Grid Height="26">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition SharedSizeGroup="Name" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="24" />
                    </Grid.ColumnDefinitions>

                    <local:Separators Element="{Binding Element}">
                        <Grid VerticalAlignment="Center">
                            <TextBlock Name="NameText" Text="{Binding Identifier}" />
                            <Button
                                Name="EditButton"
                                HorizontalAlignment="Right"
                                Background="Transparent"
                                Click="EditIdentifierClick"
                                Style="{StaticResource IconButton}"
                                ToolTip="Edit"
                                Visibility="Collapsed">
                                <fonts:Icon Text="{x:Static fonts:IconFont.Pen}" />
                            </Button>
                        </Grid>
                    </local:Separators>

                    <ContentControl Grid.Column="1" Content="{Binding Element}" />
                    <Button
                        Name="RemoveButton"
                        Grid.Column="2"
                        Width="24"
                        Height="24"
                        Margin="0,0,1,0"
                        Command="{Binding RemoveCommand}"
                        Style="{StaticResource IconButton}"
                        ToolTip="Remove"
                        Visibility="Collapsed">
                        <fonts:Icon Text="{x:Static fonts:IconFont.Trash}" />
                    </Button>
                </Grid>
                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="RemoveButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="EditButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True" />
                            <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:GenericEdit}}}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="RemoveButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="EditButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding IsIdentifierEditable}" Value="False">
                        <Setter TargetName="NameText" Property="Opacity" Value="0.6" />
                        <Setter TargetName="EditButton" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsRemovable}" Value="False">
                        <Setter TargetName="RemoveButton" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <local:GenericTemplateSelector x:Key="GenericTemplateSelector">
                <local:GenericTemplateSelector.ParentTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type schema:GenericProperty}" ItemsSource="{Binding Element.Childrens}">
                        <ContentPresenter ContentTemplate="{StaticResource SharedSchemaTemplate}" />
                    </HierarchicalDataTemplate>
                </local:GenericTemplateSelector.ParentTemplate>
                <local:GenericTemplateSelector.ElementTemplate>
                    <DataTemplate DataType="{x:Type schema:GenericProperty}">
                        <ContentPresenter ContentTemplate="{StaticResource SharedSchemaTemplate}" />
                    </DataTemplate>
                </local:GenericTemplateSelector.ElementTemplate>
            </local:GenericTemplateSelector>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <TreeView
            DataContext="{Binding ElementName=ContainerElement}"
            Grid.IsSharedSizeScope="True"
            ItemContainerStyle="{StaticResource SchemaTreeViewItem}"
            ItemTemplateSelector="{StaticResource GenericTemplateSelector}"
            ItemsSource="{Binding Root.Childrens}" />

        <local:EditIdentifierPopup x:Name="EditIdentifierPopup" />
    </Grid>
</UserControl>