<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:data="clr-namespace:Usuel.Shared.Data;assembly=Usuel.Shared"
    xmlns:font="clr-namespace:Joufflu.Shared.Resources.Fonts;assembly=Joufflu.Shared"
    xmlns:local="clr-namespace:Joufflu.Data"
    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
    xmlns:adonisConverters="clr-namespace:AdonisUI.Converters;assembly=AdonisUI"
    xmlns:s="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Joufflu.Shared;component/Styles/NamedStyles/IconButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type local:DataSchema}">
        <Style.Resources>
            <local:DepthToMarginConverter x:Key="DepthToMarginConverter" />
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DataSchema}">
                    <TreeView
                        DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                        ItemsSource="{Binding Root.Properties}"
                        Grid.IsSharedSizeScope="True">
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="TreeViewItem">

                                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}" />
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="BorderBrush" Value="Transparent" />
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="Transparent" />
                                <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="Transparent" />
                                <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}" />
                                <Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="{DynamicResource {x:Static adonisUi:Dimensions.CornerRadius}}" />
                                <Setter Property="Padding" Value="8,4" />
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="UseLayoutRounding" Value="True" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="TreeViewItem">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                </Grid.RowDefinitions>

                                                <Border
                                                    x:Name="Border"
                                                    Grid.Row="0"
                                                    Grid.Column="0"
                                                    Grid.ColumnSpan="2"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}" />

                                                <Border
                                                    x:Name="SpotlightLayer"
                                                    Grid.Row="0"
                                                    Grid.Column="0"
                                                    Grid.ColumnSpan="2"
                                                    Background="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BackgroundBrush}"
                                                    BorderBrush="{TemplateBinding adonisExtensions:CursorSpotlightExtension.BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"
                                                    adonisExtensions:CursorSpotlightExtension.MouseEventSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}}"
                                                    SnapsToDevicePixels="False" />

                                                <ToggleButton
                                                    x:Name="Expander"
                                                    Grid.Row="0"
                                                    Grid.Column="0"
                                                    Width="12"
                                                    Height="12"
                                                    Focusable="False"
                                                    ClickMode="Press"
                                                    Foreground="{TemplateBinding Foreground}"
                                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.Expander}}"
                                                    RenderTransformOrigin="0.5, 0.5">
                                                    <ToggleButton.Template>
                                                        <ControlTemplate TargetType="ToggleButton">
                                                            <ContentPresenter
                                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                HorizontalAlignment="Stretch"
                                                                VerticalAlignment="Stretch" />
                                                        </ControlTemplate>
                                                    </ToggleButton.Template>
                                                    <ToggleButton.Margin>
                                                        <MultiBinding Converter="{x:Static adonisConverters:ValuesToThicknessConverter.Instance}">
                                                            <Binding Path="Padding.Left" RelativeSource="{RelativeSource TemplatedParent}" />
                                                            <Binding Source="0" />
                                                            <Binding Source="8" />
                                                            <Binding Source="0" />
                                                        </MultiBinding>
                                                    </ToggleButton.Margin>
                                                    <ToggleButton.RenderTransform>
                                                        <RotateTransform x:Name="ExpanderRotateTransform" Angle="-90" />
                                                    </ToggleButton.RenderTransform>
                                                </ToggleButton>

                                                <ContentPresenter
                                                    x:Name="PART_Header"
                                                    Grid.Row="0"
                                                    Grid.Column="1"
                                                    ContentSource="Header"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />

                                                <ItemsPresenter
                                                    x:Name="ItemsHost"
                                                    Grid.Row="1"
                                                    Grid.Column="0"
                                                    Grid.ColumnSpan="3" />
                                            </Grid>

                                            <ControlTemplate.Triggers>

                                                <Trigger Property="IsExpanded" Value="False">
                                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                                </Trigger>

                                                <Trigger Property="IsExpanded" Value="True">
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation
                                                                    Storyboard.TargetProperty="Angle"
                                                                    Storyboard.TargetName="ExpanderRotateTransform"
                                                                    Duration="00:00:0.2"
                                                                    To="-45" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                    <Trigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation
                                                                    Storyboard.TargetProperty="Angle"
                                                                    Storyboard.TargetName="ExpanderRotateTransform"
                                                                    Duration="00:00:0.2"
                                                                    From="-45" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.ExitActions>
                                                </Trigger>

                                                <Trigger Property="HasItems" Value="False">
                                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}}" Value="True" />
                                            <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}}" Value="1" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="IsExpanded" Value="True" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=(adonisExtensions:TreeViewItemMouseOverExtension.IsMouseDirectlyOverItem), RelativeSource={RelativeSource Self}}" Value="True" />
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBrush}}" />
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBorderBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBorderBrush}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2" />
                                            <Condition Binding="{Binding Path=(adonisExtensions:TreeViewItemMouseOverExtension.IsMouseDirectlyOverItem), RelativeSource={RelativeSource Self}}" Value="True" />
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBrush}}" />
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2HighlightBorderBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBorderBrush}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3" />
                                            <Condition Binding="{Binding Path=(adonisExtensions:TreeViewItemMouseOverExtension.IsMouseDirectlyOverItem), RelativeSource={RelativeSource Self}}" Value="True" />
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBrush}}" />
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3HighlightBorderBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBorderBrush}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4" />
                                            <Condition Binding="{Binding Path=(adonisExtensions:TreeViewItemMouseOverExtension.IsMouseDirectlyOverItem), RelativeSource={RelativeSource Self}}" Value="True" />
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBrush}}" />
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4HighlightBorderBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BackgroundBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBrush}}" />
                                            <Setter Property="adonisExtensions:CursorSpotlightExtension.BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBorderBrush}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>

                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentForegroundBrush}}" />
                                    </Trigger>

                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}" />
                                    </Trigger>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsEnabled" Value="False" />
                                            <Condition Property="IsSelected" Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledAccentForegroundBrush}}" />
                                    </MultiTrigger>

                                </Style.Triggers>
                            </Style>
                        </TreeView.ItemContainerStyle>
                        <TreeView.Resources>
                            <HierarchicalDataTemplate DataType="{x:Type data:SchemaObject}" ItemsSource="{Binding Properties}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="Name" Width="auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                        VerticalAlignment="Center"
                                        Text="{Binding Name}"
                                        Margin="{Binding Depth, Converter={StaticResource DepthToMarginConverter}}" />
                                    <local:ValueTypeIcon
                                        Opacity="0.7"
                                        Type="{Binding Type}"
                                        Margin="4,0,0,0"
                                        Grid.Column="1" />


                                    <StackPanel Grid.Column="2" Orientation="Horizontal">
                                        <Button Style="{StaticResource IconButton}" Padding="6">
                                            <font:Icon Text="{x:Static font:IconFont.Plus}" FontSize="10" />
                                        </Button>
                                        <Button
                                            Style="{StaticResource IconButton}"
                                            Padding="6"
                                            Margin="1,0,0,0">
                                            <font:Icon Text="{x:Static font:IconFont.Trash}" FontSize="10" />
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </HierarchicalDataTemplate>
                            <DataTemplate DataType="{x:Type data:SchemaValue}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="Name" Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                        VerticalAlignment="Center"
                                        Text="{Binding Name}"
                                        Margin="{Binding Depth, Converter={StaticResource DepthToMarginConverter}}" />
                                    <local:ValueTypeIcon
                                        Opacity="0.7"
                                        Type="{Binding Type}"
                                        Margin="4,0,0,0"
                                        Grid.Column="1" />

                                    <Button
                                        Grid.Column="3"
                                        Style="{StaticResource IconButton}"
                                        Padding="6">
                                        <font:Icon Text="{x:Static font:IconFont.Trash}" FontSize="10" />
                                    </Button>
                                </Grid>
                            </DataTemplate>
                        </TreeView.Resources>
                    </TreeView>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ValueTypeIcon}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ValueTypeIcon}">
                    <StackPanel Orientation="Horizontal" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <font:Icon ToolTip="{Binding Type}" Text="{Binding Icon}" />
                        <TextBlock
                            VerticalAlignment="Center"
                            Margin="4,0,0,0"
                            Text="{Binding Type}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
